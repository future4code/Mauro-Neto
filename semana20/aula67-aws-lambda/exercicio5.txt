Fiz o código em ts, transpilei e mandei em um zip com os node_modules. Para testar, configurei as variáveis de ambiente na aws.
Código transpilado:

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.myFunc = void 0;
const knex_1 = __importDefault(require("knex"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const connection = knex_1.default({
    client: "mysql",
    connection: {
        host: process.env.DB_HOST,
        port: 3306,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_NAME
    },
});
const insertData = (name, cartoon_name, picture) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield connection.insert({ name, cartoon_name, picture }).into(process.env.CARTOON_TABLE_NAME);
    }
    catch (error) {
        throw new Error(error.sqlMessage || error.message);
    }
});
exports.myFunc = (event) => __awaiter(void 0, void 0, void 0, function* () {
    if (!event.name || !event.cartoon_name || !event.picture) {
        return {
            statusCode: 400,
            body: JSON.stringify("Missing parameters")
        };
    }
    if (event.name.trim() === "" || event.cartoon_name.trim() === "" || event.picture.trim() === "") {
        return {
            statusCode: 400,
            body: JSON.stringify("blank parameters")
        };
    }
    yield insertData(event.name, event.cartoon_name, event.picture);
    yield connection.destroy();
    return {
        statusCode: 200,
        body: JSON.stringify("OK")
    };
});
//# sourceMappingURL=index.js.map